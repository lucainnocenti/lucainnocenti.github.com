---
layout: post
title: Test post
date: 2016-11-11 11:11
comments: true
external-url:
categories: Test
---
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>

<style>
    canvas {
        border:1px solid red;
    }
</style>


But can I use latex??
$$
  \lvert \psi \rangle =  \frac{1}{\sqrt2} \left( \lvert 0 \rangle + \lvert 1 \rangle\right)
$$

`
Code is also not a problem, nice.
`

    asd
    code
    if 1 then 0

>>> asdSsd asda 

Now let's see if we can put a graph here:

<canvas id="myChart" width="200" height="100"></canvas>

<script>
var ctx = document.getElementById("myChart");
var myChart = new Chart(ctx, {
    type: 'bar',
    data: {
        labels: ["Red", "Blue", "Yellow", "Green", "Purple", "Orange"],
        datasets: [{
            label: ['# of Votes', 'ehia'],
            data: [12, 19, 3, 5, 2, 3],
            backgroundColor: [
                'rgba(255, 99, 132, 0.2)',
                'rgba(54, 162, 235, 0.2)',
                'rgba(255, 206, 86, 0.2)',
                'rgba(75, 192, 192, 0.2)',
                'rgba(153, 102, 255, 0.2)',
                'rgba(255, 159, 64, 0.2)'
            ],
            borderColor: [
                'rgba(255,99,132,1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(75, 192, 192, 1)',
                'rgba(153, 102, 255, 1)',
                'rgba(255, 159, 64, 1)'
            ],
            borderWidth: 1
        }]
    },
    options: {
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero:true
                }
            }]
        }
    }
});
</script>

Now that's not bad, is it?
Let's now try to move rectangles in a frame:

<canvas id="canvas" width=300 height=300></canvas>

<script>
var canvas = document.getElementById("canvas");
var ctx = canvas.getContext("2d");

var canvasOffset = $("#canvas").offset();
var offsetX = canvasOffset.left;
var offsetY = canvasOffset.top;

// animation variables
var currentX = 10;
var currentY = 10;
var frameCount = 60;
var timer;
var points;
var currentFrame;


function animate() {
    var point = points[currentFrame++];
    draw(point.x, point.y);

    // refire the timer until out-of-points
    if (currentFrame < points.length) {
        timer = setTimeout(animate, 1000 / 60);
    }
}

function linePoints(x1, y1, x2, y2, frames) {
    var dx = x2 - x1;
    var dy = y2 - y1;
    var length = Math.sqrt(dx * dx + dy * dy);
    var incrementX = dx / frames;
    var incrementY = dy / frames;
    var a = new Array();

    a.push({
        x: x1,
        y: y1
    });
    for (var frame = 0; frame < frames - 1; frame++) {
        a.push({
            x: x1 + (incrementX * frame),
            y: y1 + (incrementY * frame)
        });
    }
    a.push({
        x: x2,
        y: y2
    });
    return (a);
}

function draw(x, y) {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.beginPath();
        ctx.fillStyle = "skyblue";
        ctx.strokeStyle = "gray";
        ctx.rect(x, y, 30, 20);
        ctx.fill();
        ctx.stroke();
    }

    function handleMouseDown(e) {
        mouseX = parseInt(e.clientX - offsetX);
        mouseY = parseInt(e.clientY - offsetY);
        $("#downlog").html("Down: " + mouseX + " / " + mouseY);

        // Put your mousedown stuff here
        points = linePoints(currentX, currentY, mouseX, mouseY, frameCount);
        currentFrame = 0;
        currentX = mouseX;
        currentY = mouseY;
        animate();
    }

    $("#canvas").mousedown(function (e) {
        handleMouseDown(e);
    });

    draw(10, 10);
</script>
